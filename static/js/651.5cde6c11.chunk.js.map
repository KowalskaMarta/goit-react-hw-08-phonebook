{"version":3,"file":"static/js/651.5cde6c11.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '#redux/contacts/operation';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { Button } from '@chakra-ui/react';\nimport { Box } from '@chakra-ui/react';\n\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport { ListItem } from '@chakra-ui/react';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const editContact = id => {\n    navigate(`${id}/edit`, { state: { from: location } });\n  };\n\n  return (\n    <ListItem key={id}>\n      <Box gap=\"10px\">\n        <Button\n          leftIcon={<EditIcon />}\n          colorScheme=\"red\"\n          variant=\"solid\"\n          margin=\"20px\"\n          id={id}\n          onClick={() => editContact(id)}\n        ></Button>\n        <Button\n          leftIcon={<DeleteIcon />}\n          colorScheme=\"red\"\n          variant=\"solid\"\n          marginRight=\"20px\"\n          id={id}\n          onClick={() => dispatch(deleteContact(id))}\n        ></Button>\n        {name} : {number}\n      </Box>\n    </ListItem>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Text } from '@chakra-ui/react';\nimport { ContactListItem } from '#components/ContactListItem/ContactListItem';\nimport { Heading } from '@chakra-ui/react';\nimport { Box } from '@chakra-ui/react';\nimport { List } from '@chakra-ui/react';\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filterValue = useSelector(state => state.filter.status);\n  const error = useSelector(state => state.contacts.error);\n\n  const filterContact = contacts?.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue?.toLowerCase())\n  );\n\n  return (\n    <>\n      <Box\n        backgroundColor=\"silver\"\n        borderRadius=\"4px\"\n        display={'flex'}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        pt={'20px'}\n        pb={'20px'}\n      >\n        <Heading as=\"h2\" size=\"3xl\" noOfLines={1}>\n          Contacts\n        </Heading>\n\n        {filterContact?.length > 0 ? (\n          <List spacing={3}>\n            {filterContact?.map(({ id, name, number }) => (\n              <ContactListItem key={id} id={id} name={name} number={number} />\n            ))}\n          </List>\n        ) : (\n          (error && (\n            <Text fontSize=\"50px\" color=\"tomato\">\n              Error: {error}\n            </Text>\n          )) || (\n            <Text fontSize=\"50px\" color=\"tomato\">\n              No contacts in phoneBook\n            </Text>\n          )\n        )}\n      </Box>\n    </>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '#redux/contacts/operation';\nimport { PiAddressBook } from \"react-icons/pi\";\nimport { Button } from '@chakra-ui/react';\nimport { AddIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { Input, InputGroup, InputLeftElement, Box } from '@chakra-ui/react';\nimport { FormControl, FormLabel } from '@chakra-ui/react';\nimport { Heading } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    const id = nanoid();\n    let exist = false;\n\n    contacts.forEach(contact => {\n      if (contact.name.toLowerCase().trim() === name.toLowerCase().trim()) {\n        alert(`${name} is already in contacts`);\n        exist = true;\n      }\n    });\n\n    if (!exist) {\n      dispatch(addContact({ id, name, number }));\n    }\n    e.target.reset();\n  };\n\n  return (\n    <Box\n      backgroundColor=\"silver\"\n      borderRadius=\"4px\"\n      display={'flex'}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      flexDirection=\"column\"\n      pt={'20px'}\n      pb={'20px'}\n    >\n      <Heading as=\"h3\" size=\"3xl\" noOfLines={1}>\n        Phonebook\n      </Heading>\n\n      <form onSubmit={handleSubmit}>\n        <FormControl display={'flex'} flexDirection={'column'}>\n        <FormLabel marginTop=\"10px\">Name</FormLabel>\n\n        <InputGroup>\n            <InputLeftElement pointerEvents=\"none\" children={<PiAddressBook />} />\n            <Input\n              name=\"name\"\n              type=\"text\"\n              variant=\"outline\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              width={'300px'}\n            />\n          </InputGroup>\n        <FormLabel marginTop=\"10px\">Number</FormLabel>\n\n        <InputGroup>\n            <InputLeftElement pointerEvents=\"none\" children={<PhoneIcon />} />\n            <Input\n              name=\"number\"\n              type=\"tel\"\n              variant=\"outline\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              width={'300px'}\n            />\n          </InputGroup>\n\n        <Button\n          type=\"submit\"\n          leftIcon={<AddIcon />}\n          colorScheme=\"red\"\n          variant=\"solid\"\n          margin=\"20px\"\n        >\n          Add contact\n        </Button>\n        </FormControl>\n      </form>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/slice/filterSlice';\nimport { Input } from '@chakra-ui/react';\nimport { Box } from '@chakra-ui/react';\nimport { FormControl } from '@chakra-ui/react';\nimport { Heading } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter.status);\n  const onFilterChange = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <Box\n      backgroundColor=\"red\"\n      borderRadius=\"4px\"\n      display={'flex'}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      flexDirection=\"column\"\n      pt={'20px'}\n      pb={'20px'}\n    >\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        autoComplete=\"off\"\n      >\n        <Heading as=\"h3\" size=\"2xl\" pb={'20px'} noOfLines={1}>\n          Find contacts by name\n        </Heading>\n\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filterValue}\n          onChange={onFilterChange}\n          width={'300px'}\n        />\n        {/* <InputLeftElement pointerEvents=\"none\" children={<SearchIcon color=\"gray.300\" />} /> */}\n      </FormControl>\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContacts } from '#redux/contacts/operation';\nimport { ContactList } from '#components/ContactList/ContactList';\nimport { ContactForm } from '#components/ContactForm/ContactForm';\nimport { Filter } from '#components/Filter/Filter';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport { Contacts as default };\n"],"names":["ContactListItem","_ref","id","name","number","dispatch","useDispatch","navigate","useNavigate","location","useLocation","_jsx","ListItem","children","_jsxs","Box","gap","Button","leftIcon","EditIcon","colorScheme","variant","margin","onClick","concat","state","from","editContact","DeleteIcon","marginRight","deleteContact","ContactList","contacts","useSelector","items","filterValue","filter","status","error","filterContact","contact","toLowerCase","includes","_Fragment","backgroundColor","borderRadius","display","alignItems","justifyContent","flexDirection","pt","pb","Heading","as","size","noOfLines","length","List","spacing","map","Text","fontSize","color","ContactForm","onSubmit","e","preventDefault","form","currentTarget","elements","value","nanoid","exist","forEach","trim","alert","addContact","target","reset","FormControl","FormLabel","marginTop","InputGroup","InputLeftElement","pointerEvents","PiAddressBook","Input","type","pattern","title","required","width","PhoneIcon","AddIcon","Filter","autoComplete","onChange","Contacts","useEffect","getContacts"],"sourceRoot":""}